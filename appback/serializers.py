# # invest/serializers.py

from rest_framework import serializers
from appback.models import *

class SlotSerializer(serializers.ModelSerializer):
    class Meta:
        model = Slot
        fields = '__all__'

class eqAPSerializer(serializers.ModelSerializer):
    class Meta:
        model = eqAP
        fields = '__all__'        

class CompanySerializer(serializers.ModelSerializer):
    slots = SlotSerializer(many=True, read_only=True)

    class Meta:
        model = Company
        fields = '__all__'

class EquityComSerializer(serializers.ModelSerializer):
    eqAP = eqAPSerializer(many=True, read_only=True)

    class Meta:
        model = Company
        fields = '__all__'

class NewsSerializer(serializers.ModelSerializer):
    class Meta:
        model = News
        fields = ['id', 'title', 'image', 'description', 'date']


# editing


class InvestmentTermSerializer(serializers.ModelSerializer):
    # companies = CompanySerializer(many=True, read_only=True)
    # slots = SlotSerializer(many=True, read_only=True)
    class Meta:
        model = InvestmentTerm
        fields = '__all__'

class InvestmentDeliverableSerializer(serializers.ModelSerializer):
    class Meta:
        model = InvestmentDeliverable
        fields = ['title', 'url']

class InvestmentTermidSerilaizer(serializers.ModelSerializer):
    fileURLs = InvestmentDeliverableSerializer(source='deliverable',many=True, read_only=True)
    investment_name = serializers.CharField(source='title', read_only=True)
    # video_url = serializers.URLField(source='url', read_only=True)
    class Meta:
        model=InvestmentTerm
        fields=['investment_name','description','video','fileURLs']        


class InvestmentTermCompanySerializer(serializers.ModelSerializer):
    investment_name = serializers.CharField(source='investment_term.title', read_only=True)
    class Meta:
        model = Company
        fields=['name','id','percentage','investment_name'] 
           

class c_BenefitsSerializer(serializers.ModelSerializer):
    class Meta:
        model = c_Benefits
        fields = ['benefits']

class c_fileurlsSerializer(serializers.ModelSerializer):
    class Meta:
        model = c_fileurls
        fields = ['c_f_title','c_f_urls']

class c_slotSerializer(serializers.ModelSerializer):
    class Meta:
        model = Slot
        fields = ['slot_type','id','fixed_amount']       

class InvestmentTermCompanyidSerializer(serializers.ModelSerializer):
    benefits=c_BenefitsSerializer(many=True, read_only=True)
    c_fileurls_set=c_fileurlsSerializer(many=True, read_only=True)
    slots=c_slotSerializer(many=True, read_only=True)
    class Meta:
        model = Company
        fields=['name','benefits','c_fileurls_set','slots','logo','industry','bussiness_model','revenue_model','year_founded','business_stage','hq','brochureUrl']    


class feedSerializer(serializers.ModelSerializer):
    class Meta:
        model = feeds
        fields= '__all__'


class PortfolioSerializer(serializers.ModelSerializer):
    user = serializers.PrimaryKeyRelatedField(queryset=User.objects.all())
    company = serializers.PrimaryKeyRelatedField(queryset=Company.objects.all(), required=False, allow_null=True)
    slot = serializers.PrimaryKeyRelatedField(queryset=Slot.objects.all(), required=False, allow_null=True)
    investment_type = serializers.PrimaryKeyRelatedField(queryset=InvestmentTerm.objects.all())

    class Meta:
        model = company_portfolio
        fields = ['user', 'amount', 'timestamp', 'company', 'slot', 'investment_type']

    def create(self, validated_data):
        # Automatically set the timestamp if not provided
        if 'timestamp' not in validated_data:
            validated_data['timestamp'] = timezone.now()
        
        return super().create(validated_data)

class PortfolioCreateSerializer(serializers.Serializer):
    user_id = serializers.IntegerField()
    user_name = serializers.CharField(max_length=255, required=False, allow_null=True)  # Not stored but passed by user
    company_id = serializers.IntegerField(required=False, allow_null=True)
    slot_id = serializers.IntegerField(required=False, allow_null=True)
    slot_type = serializers.CharField(max_length=255, required=False)  # Passed but not stored
    amount = serializers.DecimalField(max_digits=10, decimal_places=2)
    investment_type = serializers.IntegerField()  # Refers to the ID of InvestmentTerm
    timestamp = serializers.DateTimeField(required=False)  # Optional or autogenerated
    transaction_id = serializers.CharField(max_length=255)  # Passed from Firebase

class ListPortfolioSerializer(serializers.ModelSerializer):
    company_logo=serializers.ImageField(source='company.logo',read_only=True)
    company_name=serializers.CharField(source='company.name',read_only=True)
    slot_type=serializers.CharField(source='slot.slot_type',read_only=True)
    slot_price=serializers.CharField(source='slot.fixed_amount',read_only=True)
    class Meta:
        model = company_portfolio
        fields = ['company','company_logo','company_name','investment_type','amount','slot','slot_type','slot_price']

# class InvestmentSerializer(serializers.ModelSerializer):
#     class Meta:
#         model = Investment
#         fields = ['investment_term','company','amount','paid']




